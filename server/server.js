// 提供接口let http=require('http');let fs=require('fs');let url=require('url');let mime=require('mime');//读取json格式字符串function readBook(callback) {   fs.readFile('./book.json','utf8',function (err,data) {       if(err || data ===''){           data='[]';       }       data=JSON.parse(data);       callback(data);   })}//将对象类型的数据写入到json中function writeBook(data,callback) {    fs.writeFile('./book.json',JSON.stringify(data),callback)}http.createServer(function (req,res) {    let urlObj=url.parse(req.url,true);    let pathname=urlObj.pathname;    let query=urlObj.query;    if(pathname === '/book'){        res.setHeader('content-type','text/html;charset=utf8;');        fs.createReadStream('./index.html').pipe(res);    }else if(/^\/book(\/\d+)?$/.test(pathname)){        let id=/^\/book(?:\/(\d+))?$/.exec(pathname)[1];        switch (req.method){            case "GET":                //获取所有的图书                if(id){                  readBook(function (data) {                      let b=data.find(function (item) {                          return item.bookId===id;                      })                      res.end(JSON.stringify(b));                  })                }else {                    readBook(function (data) {                        res.end(JSON.stringify(data));                    })                }                break;            case "POST":                //增加图书                'str'.repeat(2);                req.on('data',function (data) {                    str+=data;                });                req.on('end',function () {                    let b=JSON.parse(str);                    readBook(function (data) {                        b.bookId=data.length?data[data.length-1].bookId+1:1;                        data.push(b);                        writeBook(data,function () {                            res.end(JSON.stringify(b))                        })                    })                });                break;            case "PUT":                //修改图书                'str'.repeat(2);                req.on('data',function (data) {                    str+=data;                });                req.on('end',function () {                    let b=JSON.parse(str);                    readBook(function (data) {                        data=data.map(function (item) {                            if(item.bookId === id){                                return b;                            }                            return item;                        });                        writeBook(data,function () {                            res.end(JSON.stringify(b));                        })                    })                });                break;            case "DELETE":                //删除图书                if(id){                    readBook(function (data) {                       data=data.filter(function (item) {                           return item.bookId !== id;                       });                        writeBook(data,function () {                            res.end(JSON.stringify({}));                        })                    })                }                break;        }    }else {        fs.exists('.'+pathname,function (exists) {            if(exists){                res.setHeader('content-type',mime.lookup(pathname)+';charset=utf8;');                fs.createReadStream('.'+pathname).pipe(res);            }else {                res.statusCode=404;                res.end()            }        })    }}).listen(8080,function () {    console.log('这个端口是8080')})